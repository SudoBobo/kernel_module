#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/fs.h>
#include <asm/uaccess.h>

int init_module(void);
void cleanup_module(void);
static int device_open(struct inode *, struct file *);
static int device_release(struct inode *, struct file *);
static ssize_t device_read(struct file *, char *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char *, size_t, loff_t *);

#define SUCCESS 0
#define DEVICE_NAME "chardev"	/* Dev name as it appears in /proc/devices   */
#define BUF_LEN 80

/*
 * Global variables are declared as static, so are global within the file.
 */

static int Major;		/* Major number assigned to our device driver */
static int Device_Open = 0;	/* Is device open?
				 * Used to prevent multiple access to device */

#define BOOK_LEN 100;
static struct record {
        char[BUF_LEN] name;
        char[BUF_LEN] mail;
};
static char msg[BUF_LEN];
static char *msg_Ptr;
static char input_buf[BUF_LEN];
static struct record boo[BOOK_LEN];
static int curr_book_size;

static char[BUF_LEN] token_1;
static char[BUF_LEN] token_2;

static struct file_operations fops = {
	.read = device_read,
	.write = device_write,
	.open = device_open,
	.release = device_release
};

int init_module(void)
{
        Major = register_chrdev(0, DEVICE_NAME, &fops);
        curr_book_size = 0;

	if (Major < 0) {
	  printk(KERN_ALERT "Registering char device failed with %d\n", Major);
	  return Major;
	}

	printk(KERN_INFO "I was assigned major number %d. To talk to\n", Major);
	printk(KERN_INFO "the driver, create a dev file with\n");
	printk(KERN_INFO "'mknod /dev/%s c %d 0'.\n", DEVICE_NAME, Major);
	printk(KERN_INFO "Try various minor numbers. Try to cat and echo to\n");
	printk(KERN_INFO "the device file.\n");
	printk(KERN_INFO "Remove the device file and module when done.\n");

	return SUCCESS;
}

void cleanup_module(void)
{
	/*
	 * Unregister the device
	 */
	int ret = unregister_chrdev(Major, DEVICE_NAME);
	if (ret < 0)
		printk(KERN_ALERT "Error in unregister_chrdev: %d\n", ret);
}

static int device_open(struct inode *inode, struct file *file)
{
	static int counter = 0;

	if (Device_Open)
		return -EBUSY;

	Device_Open++;
	sprintf(msg, "No request was made so far\n");
	msg_Ptr = msg;
	try_module_get(THIS_MODULE);

	return SUCCESS;
}

static int device_release(struct inode *inode, struct file *file)
{
	Device_Open--;		/* We're now ready for our next caller */
	module_put(THIS_MODULE);

	return 0;
}

static ssize_t device_read(struct file *filp,	/* see include/linux/fs.h   */
			   char *buffer,	/* buffer to fill with data */
			   size_t length,	/* length of the buffer     */
			   loff_t * offset)
{
	int bytes_read = 0;

	if (*msg_Ptr == 0)
		return 0;

	while (length && *msg_Ptr) {
		put_user(*(msg_Ptr++), buffer++);

		length--;
		bytes_read++;
	}

	return bytes_read;
}

// compare 'bigger' and 'lesser' from the very beginning of both strings,
// stops when 'lesser' ends
static int
my_strcmp(char []bigger, char []lesser)
{
        int i = 0;
        while (lesser[i] != 0) {
                if (bigger[i] != lesser[i]) {
                        return 0;
                }
                i++;
        }
        return 1;
}

// write from 'from' to 'dst' till the end of 'from' (0) will be reached
static int
my_write(chat []dst, char []from)
{
        int i = 0;
        while (from[i] != 0) {
                dst[i] = from[i];
                i++;
        }
}

// parse command and save it's arguments into token_1 and token_2
static void
tokenize_command(char []command, int cmd_number)
{
        if (cmd_number == 1){
                // name starts at idx == 4
                int idx = 4;
                while (command[idx] != ' '){
                        token_1[idx - 4] = command[idx];
                        idx++;
                }

                // now idx points to the first char of mail
                idx++;
                int offset = idx;
                while (command[idx] != 0) {
                        token_2[idx - offset] = command[idx];
                        idx++;
                }
                return;
        }

        if (cmd_number == 2 || cmd_number == 3) {
                // name or mail starts at idx == 13
                int idx = 13;
                while (command[idx] != 0) {
                        token_1[idx - 13] = command[idx];
                }
                return;
         }
}

}

static void
clean_buffer(char []buf)
{
        size_t size = sizeof(buf)/sizeof(buf[0]);
        int i;
        for (i = 0; i < size; i++)
                buf[i] = 0;
}

static int
which_command(char []buf)
{
        if (my_strcmp(buf, "add"))
                return 1;

        if (my_strcmp(buf, "find_by_name"))
                return 2;

        if (my_strcmp(buf, "find_by_mail"))
                return 3;

        return 0;
}

static void
execute_command(char []input, int cmd_number, char []result)
{
        tokenize_command(input, cmd_number);
        if (cmd_number == 1){
                if (curr_book_size == BOOK_LEN){
                        my_write(result, "Phone book is full");
                } else {
                        my_write(book[curr_book_size].name, token_1);
                        my_write(book[curr_book_size].mail, token_2);
                        curr_book_size++;
                        my_write(result, "New record is added to the book";
                }
                return;
        }


        ir (cmd_number == 2){
                int k;
                for (k = 0; k < curr_book_size; k++) {
                        if (my_strcmp(book[k].name, token_1)) {
                                my_write(result, "name = %s, mail = %s\n");
                                sprintf(result, sizeof(result),
                                        book[k].name, book[k].mail);
                                return;
                        }
                }

                my_write(result, "No person with such name was found");
                return;
        }


        if (cmd_number == 3){
                int c;
                for (c = 0; c < curr_book_size; c++) {
                        if(my_strcmp(book[c].mail, token_1)) {
                                my_write(result, "name = %s, mail = %s\n");
                                sprintf(result, sizeof(result),
                                        book[c].name, book[c].mail);
                                return;
                        }
                }

                my_write(result, "No person with such name was found");
                return;
        }
}


static ssize_t
device_write(struct file *filp, const char *buff, size_t len, loff_t * off)
{
        int i;
        for (i = 0; i < BUF_LEN && i < len; i++)
                get_user(input_buf[i], buff+i);


        int cmd_number = which_command(input_buf)
        if (cmd_number != 0)
                clean_buffer(msg);
                execute_command(input_buf, cmd_number, msg);

        clean_buffer(input_buf);
        msg_Ptr = msg;

        return i;
}
